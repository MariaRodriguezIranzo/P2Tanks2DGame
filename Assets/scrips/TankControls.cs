//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/scrips/TankControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankControls"",
    ""maps"": [
        {
            ""name"": ""tank1"",
            ""id"": ""e09c8b03-031b-46b1-8ef7-bb33809c3df9"",
            ""actions"": [
                {
                    ""name"": ""MoveTank1"",
                    ""type"": ""Value"",
                    ""id"": ""230942cc-5ee7-4804-a281-7aa48b503fa8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireTank1"",
                    ""type"": ""Button"",
                    ""id"": ""2136c7e5-7ab9-4ef1-9fb8-21b5f30a03d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""20384141-a649-441f-bc13-5771f4c62bfe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1d20491b-d074-4935-9c92-7e473a07d4f0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8449bacc-5772-4ec6-8924-07ea9d26ae52"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dce4bb0e-f624-4308-84de-d8abf9c26962"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ff901ac0-9527-47b4-af7b-c034b1c3b3c7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""52bd8cbe-d2a3-4eed-8a32-17c73fe45b41"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""337f03f6-7bd2-46ee-af27-b454947a4d26"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireTank1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""tank2"",
            ""id"": ""d0b471c4-a73b-45fd-9edd-e67fc70b58ba"",
            ""actions"": [
                {
                    ""name"": ""MoveTank2"",
                    ""type"": ""Value"",
                    ""id"": ""32fa9ce6-382b-4e12-81d8-8eeb29f8317c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireTank2"",
                    ""type"": ""Button"",
                    ""id"": ""d4d7ff27-50a7-4b8e-a5b1-5b110c3e2eae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""aee77b1f-5dbe-43d1-ba5c-905708b717c0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cd56a055-ecb0-42fc-97b4-d154fc468c90"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""22c451d8-6687-4a94-9697-7cd33d2e48f3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9d9b5169-9b4a-4794-a125-bd0a89cb38bf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8dfca447-9df9-4007-8b7e-dbb185a9f95d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""32348201-90d2-43eb-a4b4-1efd73fed99f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80bdfe7e-e445-4011-9f19-0050bbfb498f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireTank2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // tank1
        m_tank1 = asset.FindActionMap("tank1", throwIfNotFound: true);
        m_tank1_MoveTank1 = m_tank1.FindAction("MoveTank1", throwIfNotFound: true);
        m_tank1_FireTank1 = m_tank1.FindAction("FireTank1", throwIfNotFound: true);
        // tank2
        m_tank2 = asset.FindActionMap("tank2", throwIfNotFound: true);
        m_tank2_MoveTank2 = m_tank2.FindAction("MoveTank2", throwIfNotFound: true);
        m_tank2_FireTank2 = m_tank2.FindAction("FireTank2", throwIfNotFound: true);
    }

    ~@TankControls()
    {
        UnityEngine.Debug.Assert(!m_tank1.enabled, "This will cause a leak and performance issues, TankControls.tank1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_tank2.enabled, "This will cause a leak and performance issues, TankControls.tank2.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // tank1
    private readonly InputActionMap m_tank1;
    private List<ITank1Actions> m_Tank1ActionsCallbackInterfaces = new List<ITank1Actions>();
    private readonly InputAction m_tank1_MoveTank1;
    private readonly InputAction m_tank1_FireTank1;
    public struct Tank1Actions
    {
        private @TankControls m_Wrapper;
        public Tank1Actions(@TankControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveTank1 => m_Wrapper.m_tank1_MoveTank1;
        public InputAction @FireTank1 => m_Wrapper.m_tank1_FireTank1;
        public InputActionMap Get() { return m_Wrapper.m_tank1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Tank1Actions set) { return set.Get(); }
        public void AddCallbacks(ITank1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Tank1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Tank1ActionsCallbackInterfaces.Add(instance);
            @MoveTank1.started += instance.OnMoveTank1;
            @MoveTank1.performed += instance.OnMoveTank1;
            @MoveTank1.canceled += instance.OnMoveTank1;
            @FireTank1.started += instance.OnFireTank1;
            @FireTank1.performed += instance.OnFireTank1;
            @FireTank1.canceled += instance.OnFireTank1;
        }

        private void UnregisterCallbacks(ITank1Actions instance)
        {
            @MoveTank1.started -= instance.OnMoveTank1;
            @MoveTank1.performed -= instance.OnMoveTank1;
            @MoveTank1.canceled -= instance.OnMoveTank1;
            @FireTank1.started -= instance.OnFireTank1;
            @FireTank1.performed -= instance.OnFireTank1;
            @FireTank1.canceled -= instance.OnFireTank1;
        }

        public void RemoveCallbacks(ITank1Actions instance)
        {
            if (m_Wrapper.m_Tank1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITank1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Tank1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Tank1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Tank1Actions @tank1 => new Tank1Actions(this);

    // tank2
    private readonly InputActionMap m_tank2;
    private List<ITank2Actions> m_Tank2ActionsCallbackInterfaces = new List<ITank2Actions>();
    private readonly InputAction m_tank2_MoveTank2;
    private readonly InputAction m_tank2_FireTank2;
    public struct Tank2Actions
    {
        private @TankControls m_Wrapper;
        public Tank2Actions(@TankControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveTank2 => m_Wrapper.m_tank2_MoveTank2;
        public InputAction @FireTank2 => m_Wrapper.m_tank2_FireTank2;
        public InputActionMap Get() { return m_Wrapper.m_tank2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Tank2Actions set) { return set.Get(); }
        public void AddCallbacks(ITank2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Tank2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Tank2ActionsCallbackInterfaces.Add(instance);
            @MoveTank2.started += instance.OnMoveTank2;
            @MoveTank2.performed += instance.OnMoveTank2;
            @MoveTank2.canceled += instance.OnMoveTank2;
            @FireTank2.started += instance.OnFireTank2;
            @FireTank2.performed += instance.OnFireTank2;
            @FireTank2.canceled += instance.OnFireTank2;
        }

        private void UnregisterCallbacks(ITank2Actions instance)
        {
            @MoveTank2.started -= instance.OnMoveTank2;
            @MoveTank2.performed -= instance.OnMoveTank2;
            @MoveTank2.canceled -= instance.OnMoveTank2;
            @FireTank2.started -= instance.OnFireTank2;
            @FireTank2.performed -= instance.OnFireTank2;
            @FireTank2.canceled -= instance.OnFireTank2;
        }

        public void RemoveCallbacks(ITank2Actions instance)
        {
            if (m_Wrapper.m_Tank2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITank2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Tank2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Tank2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Tank2Actions @tank2 => new Tank2Actions(this);
    public interface ITank1Actions
    {
        void OnMoveTank1(InputAction.CallbackContext context);
        void OnFireTank1(InputAction.CallbackContext context);
    }
    public interface ITank2Actions
    {
        void OnMoveTank2(InputAction.CallbackContext context);
        void OnFireTank2(InputAction.CallbackContext context);
    }
}
